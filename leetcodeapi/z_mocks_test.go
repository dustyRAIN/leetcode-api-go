package leetcodeapi

import (
	http "net/http"
	"net/http/httptest"

	mock "github.com/stretchr/testify/mock"
)

// IUtilMock is an autogenerated mock type for the IUtilMock type
type IUtilMock struct {
	mock.Mock
}

// MakeGraphQLRequest provides a mock function with given fields: payload, resultRef
func (_m *IUtilMock) MakeGraphQLRequest(payload string, resultRef interface{}) error {
	ret := _m.Called(payload, resultRef)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, interface{}) error); ok {
		r0 = rf(payload, resultRef)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// convertListToString provides a mock function with given fields: list
func (_m *IUtilMock) convertListToString(list []string) string {
	ret := _m.Called(list)

	var r0 string
	if rf, ok := ret.Get(0).(func([]string) string); ok {
		r0 = rf(list)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// makeHttpRequest provides a mock function with given fields: method, url, contentType, body, resultRef
func (_m *IUtilMock) makeHttpRequest(method string, url string, body string, resultRef interface{}) error {
	ret := _m.Called(method, url, body, resultRef)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, string, string, interface{}) error); ok {
		r0 = rf(method, url, body, resultRef)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// parseCookie provides a mock function with given fields: cookies, cookieName
func (_m *IUtilMock) parseCookie(cookies []*http.Cookie, cookieName string) string {
	ret := _m.Called(cookies, cookieName)

	var r0 string
	if rf, ok := ret.Get(0).(func([]*http.Cookie, string) string); ok {
		r0 = rf(cookies, cookieName)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewIUtilMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewIUtilMock creates a new instance of IUtilMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIUtilMock(t mockConstructorTestingTNewIUtilMock) *IUtilMock {
	mock := &IUtilMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// IQueryMock is an autogenerated mock type for the IQueryMock type
type IQueryMock struct {
	mock.Mock
}

// getGraphQLPayloadAllProblems provides a mock function with given fields:
func (_m *IQueryMock) getGraphQLPayloadAllProblems(offset int, pageSize int) string {
	ret := _m.Called(offset, pageSize)

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadCommentReplies provides a mock function with given fields: commentId
func (_m *IQueryMock) getGraphQLPayloadCommentReplies(commentId int64) string {
	ret := _m.Called(commentId)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(commentId)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadDiscussion provides a mock function with given fields: topicId
func (_m *IQueryMock) getGraphQLPayloadDiscussion(topicId int64) string {
	ret := _m.Called(topicId)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64) string); ok {
		r0 = rf(topicId)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadDiscussionComments provides a mock function with given fields: topicId, orderBy, offset, pageSize
func (_m *IQueryMock) getGraphQLPayloadDiscussionComments(topicId int64, orderBy string, offset int, pageSize int) string {
	ret := _m.Called(topicId, orderBy, offset, pageSize)

	var r0 string
	if rf, ok := ret.Get(0).(func(int64, string, int, int) string); ok {
		r0 = rf(topicId, orderBy, offset, pageSize)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadDiscussionList provides a mock function with given fields: categories, tags, orderBy, searchQuery, offset
func (_m *IQueryMock) getGraphQLPayloadDiscussionList(categories []string, tags []string, orderBy string, searchQuery string, offset int) string {
	ret := _m.Called(categories, tags, orderBy, searchQuery, offset)

	var r0 string
	if rf, ok := ret.Get(0).(func([]string, []string, string, string, int) string); ok {
		r0 = rf(categories, tags, orderBy, searchQuery, offset)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadProblemContent provides a mock function with given fields: titleSlug
func (_m *IQueryMock) getGraphQLPayloadProblemContent(titleSlug string) string {
	ret := _m.Called(titleSlug)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(titleSlug)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadProblemsByTopic provides a mock function with given fields: topicStag
func (_m *IQueryMock) getGraphQLPayloadProblemsByTopic(topicStag string) string {
	ret := _m.Called(topicStag)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(topicStag)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadTopInterviewProblems provides a mock function with given fields:
func (_m *IQueryMock) getGraphQLPayloadTopInterviewProblems(offset int, pageSize int) string {
	ret := _m.Called(offset, pageSize)

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadUserContestRankingHistory provides a mock function with given fields: username
func (_m *IQueryMock) getGraphQLPayloadUserContestRankingHistory(username string) string {
	ret := _m.Called(username)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadUserProfileCalendar provides a mock function with given fields: username
func (_m *IQueryMock) getGraphQLPayloadUserProfileCalendar(username string) string {
	ret := _m.Called(username)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadUserPublicProfile provides a mock function with given fields: username
func (_m *IQueryMock) getGraphQLPayloadUserPublicProfile(username string) string {
	ret := _m.Called(username)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadUserRecentAcSubmissions provides a mock function with given fields: username, pageSize
func (_m *IQueryMock) getGraphQLPayloadUserRecentAcSubmissions(username string, pageSize int) string {
	ret := _m.Called(username, pageSize)

	var r0 string
	if rf, ok := ret.Get(0).(func(string, int) string); ok {
		r0 = rf(username, pageSize)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadUserSolveCountByDifficulty provides a mock function with given fields: username
func (_m *IQueryMock) getGraphQLPayloadUserSolveCountByDifficulty(username string) string {
	ret := _m.Called(username)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// getGraphQLPayloadUserSolveCountByTag provides a mock function with given fields: username
func (_m *IQueryMock) getGraphQLPayloadUserSolveCountByTag(username string) string {
	ret := _m.Called(username)

	var r0 string
	if rf, ok := ret.Get(0).(func(string) string); ok {
		r0 = rf(username)
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

type mockConstructorTestingTNewIQueryMock interface {
	mock.TestingT
	Cleanup(func())
}

// NewIQueryMock creates a new instance of IQueryMock. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
func NewIQueryMock(t mockConstructorTestingTNewIQueryMock) *IQueryMock {
	mock := &IQueryMock{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

func GetMockedHttpServer(responseBody []byte, statusCode int) *httptest.Server {
	server := httptest.NewServer(http.HandlerFunc(func(w http.ResponseWriter, r *http.Request) {
		w.WriteHeader(statusCode)
		w.Write(responseBody)
	}))
	globalServerUrl = server.URL
	return server
}
